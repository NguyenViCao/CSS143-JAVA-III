package Project3;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*<pre>
* Class        ShortestPathGUI.java
* Description  A class representing the GUI used in the ShortestPath
               Application. This program reads data from text files and builds
               a graph for which a MST is displayed with total weigh.
               WeightedGraphSample1.txt has ABQ as vertex #12 with appropriate
               diatance from Seattle, Boston and Dallas.
* Platform     jdk 1.8.0_241; NetBeans IDE 11.3; PC Windows 10
* Course       CS 143
* Date         6/10/2021
* @author      <i>Nguyen Vi Cao</i>
* @version     %1% %2%
* @see         javax.swing.JFrame
* @see         java.awt.Toolkit 
*</pre>
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
public class ShortestPathGUI extends javax.swing.JFrame
{
    private String fileName = "src/Project3/WeightedEdges0.txt";
    private StringBuffer output = new StringBuffer();
    private List<WeightedEdge> edges;
    private WeightedGraph<Integer> graph;
    private HashMap<Integer, String> map = new HashMap<>();
    private int numberOfVertices = 0;
    private boolean isConnected = false;
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Constructor  MSTGUI()-default constructor
     * Description  Create an instance of the GUI form, set icon image, set
     *              default button, and instantiate edges and graph.
     * Date         5/28/2021
     * @author      <i>Nguyen Vi Cao</i>
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    public ShortestPathGUI()
    {
        initComponents();
        //set image
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("src/Images/Cities_tiny.png"));
        //set default button
        this.getRootPane().setDefaultButton(shortestJButton);
        edges = new ArrayList<>();
        graph = new WeightedGraph<Integer>(edges, numberOfVertices);
      
    }
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       readFromFile()
     * Description  Read text file and create ArrayList of edges.
     * Date:        5/28/2021
     * @author      <i>Nguyen Vi Cao</i>
     * @param       textFile String
     *</pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void readFromFile(String fileName)
    {        
        try
        {
            File file = new File(fileName);
            Scanner inFile = new java.util.Scanner(file);
            edges = new ArrayList();
            
            //read the number of vertices -- first line in file
            String line = inFile.nextLine();
            numberOfVertices = Integer.parseInt(line);
            
            while (inFile.hasNext())
            {
                line = inFile.nextLine();
                //split line at "|"
                String[] triplets = line.split("[\\|]");
                
                for (String triple: triplets)
                {
                    String[] tokens = triple.split("[,]");
                    int u = Integer.parseInt(tokens[0].trim());
                    int v = Integer.parseInt(tokens[1].trim());
                    double w = Double.parseDouble(tokens[2].trim());
                    
                    edges.add(new WeightedEdge(u, v, w));
                    edges.add(new WeightedEdge(v, u, w));
                }
            }
        }
        catch(FileNotFoundException fnfexp)
        {
            JOptionPane.showMessageDialog(null, "Input error -- File not found.",
                    "File Not Found Error!", JOptionPane.ERROR_MESSAGE);
        }        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleJLabel = new javax.swing.JLabel();
        fileJLabel = new javax.swing.JLabel();
        filesJComboBox = new javax.swing.JComboBox<>();
        controlJPanel = new javax.swing.JPanel();
        goJButton = new javax.swing.JButton();
        quitJButton = new javax.swing.JButton();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsJTextArea = new javax.swing.JTextArea();
        shortestJLabel = new javax.swing.JLabel();
        shortestJButton = new javax.swing.JButton();
        personJMenuBar = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        newJMenuItem = new javax.swing.JMenuItem();
        showPictureOfGraphsJMenuItem = new javax.swing.JMenuItem();
        saveJMenuItem = new javax.swing.JMenuItem();
        fileJSeparator = new javax.swing.JPopupMenu.Separator();
        printMenuItem = new javax.swing.JMenuItem();
        quitJMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Shortest Path");
        setResizable(false);

        titleJLabel.setFont(new java.awt.Font("Tempus Sans ITC", 2, 45)); // NOI18N
        titleJLabel.setForeground(new java.awt.Color(0, 102, 102));
        titleJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Cities_small.png"))); // NOI18N
        titleJLabel.setText("         Shortest Path");

        fileJLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        fileJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        fileJLabel.setText("Select File:");

        filesJComboBox.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        filesJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "WeightedEdges0", "WeightedEdges1" }));

        controlJPanel.setLayout(new java.awt.GridLayout(1, 2, 3, 3));

        goJButton.setBackground(new java.awt.Color(255, 255, 204));
        goJButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        goJButton.setMnemonic('g');
        goJButton.setText("Go");
        goJButton.setToolTipText("Show results");
        goJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(goJButton);

        quitJButton.setBackground(new java.awt.Color(255, 255, 204));
        quitJButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        quitJButton.setMnemonic('Q');
        quitJButton.setText("Quit");
        quitJButton.setToolTipText("End the Application");
        quitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(quitJButton);

        resultsJTextArea.setEditable(false);
        resultsJTextArea.setBackground(new java.awt.Color(240, 240, 240));
        resultsJTextArea.setColumns(20);
        resultsJTextArea.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        resultsJTextArea.setLineWrap(true);
        resultsJTextArea.setRows(5);
        resultsJTextArea.setWrapStyleWord(true);
        resultsScrollPane.setViewportView(resultsJTextArea);

        shortestJLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        shortestJLabel.setText("Calculate The Shortest Path: ");

        shortestJButton.setBackground(new java.awt.Color(255, 255, 204));
        shortestJButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        shortestJButton.setText("Shortest Path");
        shortestJButton.setToolTipText("Calculate the shortest distance between two chosen cities");
        shortestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shortestJButtonActionPerformed(evt);
            }
        });

        fileJMenu.setMnemonic('F');
        fileJMenu.setText("File");

        newJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newJMenuItem.setMnemonic('N');
        newJMenuItem.setText("New");
        newJMenuItem.setToolTipText("Load new City database");
        newJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(newJMenuItem);

        showPictureOfGraphsJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        showPictureOfGraphsJMenuItem.setMnemonic('G');
        showPictureOfGraphsJMenuItem.setText("Show Graphs");
        showPictureOfGraphsJMenuItem.setToolTipText("Show pictures of graphs");
        showPictureOfGraphsJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPictureOfGraphsJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(showPictureOfGraphsJMenuItem);

        saveJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveJMenuItem.setMnemonic('s');
        saveJMenuItem.setText("Save");
        saveJMenuItem.setToolTipText("Save the path");
        saveJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(saveJMenuItem);
        fileJMenu.add(fileJSeparator);

        printMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        printMenuItem.setMnemonic('P');
        printMenuItem.setText("Print Form");
        printMenuItem.setToolTipText("Print Form as GUI");
        printMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printMenuItem);

        quitJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        quitJMenuItem.setMnemonic('e');
        quitJMenuItem.setText("Exit");
        quitJMenuItem.setToolTipText("End the application");
        quitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(quitJMenuItem);

        personJMenuBar.add(fileJMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText("Help");

        aboutJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        aboutJMenuItem.setMnemonic('A');
        aboutJMenuItem.setText("About");
        aboutJMenuItem.setToolTipText("Show About form");
        aboutJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutJMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutJMenuItem);

        personJMenuBar.add(helpMenu);

        setJMenuBar(personJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titleJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(fileJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(filesJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(controlJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(resultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(shortestJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shortestJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(filesJComboBox)
                    .addComponent(controlJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shortestJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shortestJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(13, 13, 13)
                .addComponent(resultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       printJMenuItemActionPerformed()
     * Description  Event handler to print the for as a GUI. Calls the
     *              PrintUtilities class static printComponent method.
     * @author      <i>Nguyen Vi Cao</i>
     * Date         4/5/2021
     * History Log  7/18/2018, 4/3/2020
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void printMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_printMenuItemActionPerformed
    {//GEN-HEADEREND:event_printMenuItemActionPerformed
        PrintUtilities.printComponent(this);
    }//GEN-LAST:event_printMenuItemActionPerformed
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       quitJMenuItemActionPerformed()
     * Description  Event handler to end the application. Calls the quitJButton
     *              doClick event handler,
     * @author      <i>Nguyen Vi Cao</i>
     * Date         4/3/2020
     * History Log  7/18/2018     
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void quitJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitJMenuItemActionPerformed
    {//GEN-HEADEREND:event_quitJMenuItemActionPerformed
        quitJButton.doClick();
    }//GEN-LAST:event_quitJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       aboutJMenuItemActionPerformed()
     * Description  Create an About form and show it. 
     * @param       evt java.awt.event.KeyEvent
     * @author      <i>Nguyen Vi Cao</i>
     * Date         4/5/2021
     * History Log  7/18/2018, 5/7/2020
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void aboutJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutJMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutJMenuItemActionPerformed
        About aboutWindow = new About(this, true);
        aboutWindow.setVisible(true);
    }//GEN-LAST:event_aboutJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       newJMenuItemActionPerformed
     * Description  Event handler to chose a separate file for a graph. Also
     *              calls readFromFile and createGraph methods.
     * @param       evt java.awt.event.KeyEvent
     * @author      <iNguyen Vi Cao</i>
     *</pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void newJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newJMenuItemActionPerformed
    {//GEN-HEADEREND:event_newJMenuItemActionPerformed
        try
        {
            JFileChooser chooser = new JFileChooser("src/Project3");
            //Filter only txt files
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Txt Files", "txt");
            chooser.setFileFilter(filter);
            int choice = chooser.showOpenDialog(null);
            if (choice == JFileChooser.APPROVE_OPTION)
            {
                File chosenFile = chooser.getSelectedFile();
                fileName = "src/Project3/" + chosenFile.getName();
                filesJComboBox.setSelectedItem(chosenFile.getName());
                
                readFromFile(fileName); 
                createGraph();  //dynamically decide if connected
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Cannot find file",
                    "File Input Error", JOptionPane.WARNING_MESSAGE);
            }
        }
        catch(java.lang.IllegalArgumentException exp)
        {
            JOptionPane.showMessageDialog(null, "File is not in correct format.",
                "File Input Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_newJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       quitJButtonActionPerformed()
     * Description  Event handler to end the application.
     * @author      <i>Nguyen Vi Cao</i>
     * Date         4/3/2020
     * History Log  7/18/2018     
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void quitJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitJButtonActionPerformed
    {//GEN-HEADEREND:event_quitJButtonActionPerformed
        System.exit(0);        
    }//GEN-LAST:event_quitJButtonActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       showPictureOfGraphsMenuItemActionPerformed()
     * Description  Display picture of the two files and the graphs used.
     * @author      <i>Nguyen Vi Cao</i>
     * Date         4/3/2020
     * History Log  7/18/2018     
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void showPictureOfGraphsJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_showPictureOfGraphsJMenuItemActionPerformed
    {//GEN-HEADEREND:event_showPictureOfGraphsJMenuItemActionPerformed
        new ShowGraphs(this,true).setVisible(true);
    }//GEN-LAST:event_showPictureOfGraphsJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       shortestJButtonActionPerformed()
     * Description  If the graph is connected, prompt the user to enter two 
     *              cities and then display the shortest path between them.
     * @author      <i>Nguyen Vi Cao</i>
     * Date         6/4/2021
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void shortestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shortestJButtonActionPerformed
        try
        {
            goJButtonActionPerformed(evt);
            if(!isConnected)
            {
                resultsJTextArea.setText("Graph is not connected.");
            }
            else
            {
                int v1 = Integer.parseInt(JOptionPane.showInputDialog("Enter an integer corresponding to a city as a starting point: "
                    + "\nSeattle as 0" + "\nSan Francisco as 1" + "\nLos Angeles as 2"
                    + "\nDenver as 3" + "\nKansas City as 4" + "\nChicago as 5"
                    + "\nBoston as 6" + "\nNew York as 7" + "\nAtlanta as 8"
                    + "\nMiami as 9" + "\nDallas as 10" + "\nHouston as 11"));
                int v2 = Integer.parseInt(JOptionPane.showInputDialog("Enter an integer corresponding to a city as a destination point: "
                    + "\nSeattle as 0" + "\nSan Francisco as 1" + "\nLos Angeles as 2"
                    + "\nDenver as 3" + "\nKansas City as 4" + "\nChicago as 5"
                    + "\nBoston as 6" + "\nNew York as 7" + "\nAtlanta as 8"
                    + "\nMiami as 9" + "\nDallas as 10" + "\nHouston as 11"));
                WeightedGraph<Integer>.ShortestPathTree tree = graph.getShortestPath(graph.getIndex(v1));
                tree.printAllPaths();
                // Display shortest paths
                java.util.List<Integer> path = tree.getPath(graph.getIndex(v2));
                //add cities to the map
                map.put(0, "Seattle");map.put(1, "San Francisco");map.put(2, "Los Angeles");
                map.put(3, "Denver");map.put(4, "Kansas City");map.put(5, "Chicago");
                map.put(6, "Boston");map.put(7, "New York");map.put(8, "Atlanta");
                map.put(9, "Miami");map.put(10, "Dallas");map.put(11, "Houston");
                output.append("\nThe shortest path is: ");
                for (int i = path.size() - 1; i >= 0; i--)
                {    
                    if (path.contains(path.get(i)))
                    {
                        String a = map.get(path.get(i));
                        output.append(a + "   ");
                    }
                }
                output.append("\nThe shortest distance through these cities is " + tree.getCost(v2) + " miles.");
                resultsJTextArea.setText(output.toString());
                showPictureOfGraphsJMenuItemActionPerformed(evt);
            }
        }
        catch(Exception exp)
        {
            JOptionPane.showMessageDialog(null, "Cannot find path",
                    "Path Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_shortestJButtonActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        SaveJMenuItemActionPerformed()
    * Description   Saves the content of the OutJTextArea to an external file 
    *               with the player.
    * Date          6/14/2021
    * @author       <i>Nguyen Vi Cao</i>	
    * @param        evt java.awt.event.ActionEvent
    * @see          java.awt.event.ActionEvent
    * @see          java.io.FileWriter  
    * @see          java.io.PrintWriter
    * @see          java.io.IOException 
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void saveJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJMenuItemActionPerformed
        try
        {
            FileWriter filePointer = new FileWriter("src/Project3/ShortestPath.txt", false);
            PrintWriter output = new PrintWriter(filePointer, true);
            output.write(resultsJTextArea.getText());
            output.close();
        }
        catch (IOException exp)
        {
            exp.printStackTrace();
        }
    }//GEN-LAST:event_saveJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       goJButtonActionPerformed()
     * Description  Event handler to end the application.
     * @author      <i>Nguyen Vi Cao</i>
     * Date         6/14/2021  
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void goJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goJButtonActionPerformed
        try
        {
            resultsJTextArea.setText("");
            output = new StringBuffer();
            String fileComboBox = filesJComboBox.getSelectedItem().toString();
            fileName = "src/Project3/" + fileComboBox + ".txt";
            readFromFile(fileName);
            createGraph();      //create the graph and decide if connected
        }
        catch(Exception exp)
        {
            JOptionPane.showMessageDialog(null, exp.getMessage(),
                "Cannot create graph", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_goJButtonActionPerformed

   
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       createGraph()
     * Description  Created UnweightedGraph and associated tree and decide if
     *              the graph is connected.
     * @author      <i>Nguyen Vi Cao</i>
     * Date         5/28/2021   
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public void createGraph()
    {
        resultsJTextArea.setText("");
        output = new StringBuffer();
        //construct graph
        graph = new WeightedGraph(edges, numberOfVertices);
        edges = DisjointSetClass.kruskalAlgorithm(edges, numberOfVertices);
        output.append("The number of vertices is " + numberOfVertices + 
                "\n\n");
        
        AbstractGraph<Integer>.Tree tree = graph.dfs(0);    //for connected
        output.append(graph.displayWeightedEdges()+ "\n");
        
        //check if connected
        if (tree.getNumberOfVerticesFound() == numberOfVertices)
        {
            output.append("The USA map is connected");
            isConnected = true;
        }
        else
        {
            output.append("The graph is not connected");
            isConnected = false;
        }
        
        StringBuffer out = displayEdges(edges);
        output.append("\n\nDistances that comprising the whole USA Map:\n" +
                out.substring(0, out.length() - 2));
        //output.append("\n" + tree.printTree(new StringBuffer()));
        output.append("\n\nTotal distance is " + DisjointSetClass.getTotalWeight() + " miles.");
        resultsJTextArea.setText(output.toString());
    }
        
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       displayEdges()
     * Description  Create and display the edges that conprise the MST.
     * @author      <i>Nguyen Vi Cao</i>
     * @param       edges List
     * @return      out StringBuffer
     * Date         4/3/2020
     * History Log  7/18/2018     
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public StringBuffer displayEdges(List<WeightedEdge> edges)
    {
        StringBuffer out = new StringBuffer();
        for (int i = 0; i < edges.size(); i++)
            out.append(edges.get(i)); //implicit gall to toString() of WeightedEdge
        return out;
    }
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
     * Method       main()
     * Description  Displays splash screen and the main GUI form.
     * @param       args are the command line strings
     * @author      <i>Nguyen Vi Cao</i>
     * Date         4/5/2021
     * History Log  7/18/2018, 5/7/2020
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public static void main(String args[])
    {
        // Show splash screen
        Splash mySplash = new Splash(4000);     // duration = 5 seconds
        mySplash.showSplash();                  // show splash screen  
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ShortestPathGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ShortestPathGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ShortestPathGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ShortestPathGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ShortestPathGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutJMenuItem;
    private javax.swing.JPanel controlJPanel;
    private javax.swing.JLabel fileJLabel;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JPopupMenu.Separator fileJSeparator;
    private javax.swing.JComboBox<String> filesJComboBox;
    private javax.swing.JButton goJButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem newJMenuItem;
    private javax.swing.JMenuBar personJMenuBar;
    private javax.swing.JMenuItem printMenuItem;
    private javax.swing.JButton quitJButton;
    private javax.swing.JMenuItem quitJMenuItem;
    private javax.swing.JTextArea resultsJTextArea;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JMenuItem saveJMenuItem;
    private javax.swing.JButton shortestJButton;
    private javax.swing.JLabel shortestJLabel;
    private javax.swing.JMenuItem showPictureOfGraphsJMenuItem;
    private javax.swing.JLabel titleJLabel;
    // End of variables declaration//GEN-END:variables
}
